#+TITLE: emacs/init
#+AUTHOR: Chase Adams
#+EMAIL: chasebuildssoftware@gmail.com

*This =org= file is evaluated in Emacs by [[./bootstrap.org::*init.el][bootstrap.org in init.el]]. If you're going to use my dotfiles as an example for how to write your own emacs configuration, please checkout [[./bootstrap.org][bootstrap.org]] first.* 

The purpose of this file is to load all of the other =org= files. 

On 2016-12-09, I started my journey into Emacs. There was no way of knowing that this 6 year running champion for vim would fall deeply into the blackhole that is Emacs, but now that I'm here, there's no turning back...Emacs is simply the tool I've been looking for my entire career as a software engineer.

This document is a living, breathing self-documented configuration. What you see in this file is /exactly/ what my configuration looks like, the ~init.el~ will always contain the code found in this document because /Emacs org-mode/ is doing the generation for me.

* Setup 

=caio-load-org-dotfiles= is the same function that's been explained in [[file:../bootstrap.org][bootstrap.org]]. It's "cheaper" than using org-babel-load-file: 
#+BEGIN_SRC emacs-lisp
  (defun caio-load-org-dotfiles (path)
    (with-temp-buffer
      (insert-file (caio-dotfiles-join path))
      (goto-char (point-min))
      (while (not (eobp))
        (forward-line 1)
        (cond
         ((looking-at "^#\\+BEGIN_SRC +emacs-lisp *$")
          (let ((l (match-end 0)))
            (search-forward "\n#+END_SRC")
            (eval-region l (match-beginning 0)))))
        )))
#+END_SRC

=dotfiles-dir= makes a file call for dotfiles easier by getting the path for us:
#+BEGIN_SRC emacs-lisp
  (setq dropbox-dir "~/Dropbox/org/")
  (setq dotfiles-dir "~/src/gitlab.com/chaseadamsio/dotfiles/")
  (setq emacs-dir (concat dotfiles-dir "emacs/"))
#+END_SRC

=caio-dotfiles-join= takes a path and returns a path for =dotfiles/emacs/**/*.org=
#+BEGIN_SRC emacs-lisp
  (defun caio-dotfiles-join (path)
    "Join the dotfile directory with the path provided"
    (concat dotfiles-dir path ".org"))
#+END_SRC

=caio-dropbox-join= takes a path and returns a path for =Dropbox/org/**/*.org=
#+BEGIN_SRC emacs-lisp
  (defun caio-dropbox-join (path)
    "Join the dotfile directory with the path provided"
    (concat dropbox-dir path ".org"))
#+END_SRC


* Package Management & Package Defaults

Package Management is really important to me, so I did my research and found that Cask meets my requirements:

- a single file with individually declared dependencies
- pallet keeps it up to date from running ~package-install~
- both of these make it easy to reproduce environments across machines 
#+name: package-management
#+BEGIN_SRC emacs-lisp
  (require 'cask "~/.cask/cask.el")
  (cask-initialize)
  (require 'pallet)
  (pallet-mode t)
#+END_SRC

Use go-eldoc
#+name: package-management
#+BEGIN_SRC emacs-lisp
(require 'go-eldoc)
#+END_SRC

Use company
#+name: package-management
#+BEGIN_SRC emacs-lisp
(require 'company)

(setq company-tooltip-limit 20)
(setq company-idle-delay .3)   
(setq company-echo-delay 0)    
(setq company-begin-commands '(self-insert-command))
                                  
#+END_SRC

Use multicursor...
#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

Initialize exec-path-from-shell for getting GOPATH later...
#+BEGIN_SRC emacs-lisp

  (exec-path-from-shell-initialize)
#+END_SRC

use helm-projectile...
#+BEGIN_SRC emacs-lisp
(require 'helm-projectile)
(helm-projectile-on)
#+END_SRC

Override default emacs buffer display with helm's buffer list...
#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "C-x b") 'helm-buffers-list)
#+END_SRC

Override default emacs bookmarks with helm's bookmarks...
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x r b") 'helm-bookmarks)
#+END_SRC

Override default emacs M-x with helm's M-x...
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC

Show kill ring with helm...
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
#+END_SRC

Override default emacs find-file with helm's find-file...
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-f") 'helm-find-files)
#+END_SRC

Save backups and auto-saves to system temporary directory rather than in the source directory (version control becomes a nightmare otherwise)
#+BEGIN_SRC emacs-lisp
 (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))
#+END_SRC

* Sensible Resets

Reset yes-or-no to be y-or-n because I hate typing more than I have to:
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Don't wrap lines for code, but do wrap lines for text...
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook '(lambda ()
    (setq truncate-lines t
          word-wrap nil)))

(add-hook 'text-mode-hook '(lambda ()
    (setq truncate-lines nil
          word-wrap t)))
#+END_SRC

Reset (C,M)-v to only move half pages forwards and backwards respectively...
#+BEGIN_SRC emacs-lisp
(defun scroll-half-page-backward ()
  "scroll down half the page"
  (interactive)
  (scroll-down (/ (window-body-height) 2)))

(defun scroll-half-page-forward ()
  "scroll up half the page"
  (interactive)
  (scroll-up (/ (window-body-height) 2)))

(global-set-key (kbd "C-v") 'scroll-half-page-forward)
(global-set-key (kbd "M-v") 'scroll-half-page-backward)
#+END_SRC

Use super (cmd) + an arrow to easily navigate windows...
#+BEGIN_SRC emacs-lisp
(use-package windmove
  ;; :defer 4
  :ensure t
  :config
  ;; use command key on Mac
  (windmove-default-keybindings 'super)
  ;; wrap around at edges
  (setq windmove-wrap-around t))
#+END_SRC

Resize font easily with =M-+= and =M--=...
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-+") 'text-scale-increase)
(global-set-key (kbd "M--") 'text-scale-decrease)
#+END_SRC

* Essentials

Automatically insert the closing character for pair-type characters.
#+name: essentials
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'electric-pair-local-mode)
#+END_SRC

In some languages (looking at you lisp family!) it can be really hard to tell which pair of parens goes together, enable parens highlighting:
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC 

* Appearance

I'm using [[https://github.com/hlissner/emacs-doom-theme][Doom Themes]] as my color scheme with =dark one= as the loaded theme.
#+name: appearance
#+BEGIN_SRC emacs-lisp
(require 'doom-themes)
(load-theme 'doom-one t)
#+END_SRC

Set the doom-buffers to be "brighter".
#+name: appearance
#+BEGIN_SRC emacs-lisp
(add-hook 'find-file-hook 'doom-buffer-mode)
#+END_SRC

Set some variables for the doom ui.
#+name: appearance
#+BEGIN_SRC emacs-lisp
(defvar doom-ui-theme 'doom-one
  "The color theme currently in use.")
(defvar doom-ui-font
  (font-spec :family "Fira Mono")
  "The font currently in use.")
(defvar doom-ui-variable-pitch-font
  (font-spec :family "Fira Sans")
  "The font currently in use.")
(setq org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t)
#+END_SRC

Use doom neotree with nice icons.
#+name: appearance
#+BEGIN_SRC emacs-lisp
(require 'doom-neotree)
(setq doom-neotree-enable-file-icons 'simple)
#+END_SRC

all-the-icons for beautiful icons in modeline and neotree.
#+name: appearance
#+BEGIN_SRC emacs-lisp
(require 'all-the-icons)
#+END_SRC 

this unclutters the modeline when there are lots of major and minor modes that don't need to be shown there.
#+name: appearance
#+BEGIN_SRC emacs-lisp
(require 'diminish)
(eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
(eval-after-load "company" '(diminish 'company-mode))
(eval-after-load "eldoc" '(diminish 'eldoc-mode))
(eval-after-load "paredit" '(diminish 'paredit-mode))
(eval-after-load "tagedit" '(diminish 'tagedit-mode))
(eval-after-load "elisp-slime-nav" '(diminish 'elisp-slime-nav-mode))
(eval-after-load "skewer-mode" '(diminish 'skewer-mode))
(eval-after-load "skewer-css" '(diminish 'skewer-css-mode))
(eval-after-load "skewer-html" '(diminish 'skewer-html-mode))
(eval-after-load "smartparens" '(diminish 'smartparens-mode))
(eval-after-load "guide-key" '(diminish 'guide-key-mode))
(eval-after-load "whitespace-cleanup-mode" '(diminish 'whitespace-cleanup-mode))
(eval-after-load "subword" '(diminish 'subword-mode))
#+END_SRC

murdered out (makes the appearance a lot more subtle on interactions)
#+name: appearance
#+BEGIN_SRC emacs-lisp
(setq-default
 mode-line-default-help-echo nil ; don't say anything on mode-line mouseover
 indicate-buffer-boundaries nil  ; don't show where buffer starts/ends
 indicate-empty-lines nil        ; don't show empty lines
 fringes-outside-margins t       ; switches order of fringe and margin
 ;; Keep cursors and highlights in current window only
 cursor-in-non-selected-windows nil
 highlight-nonselected-windows nil
 ;; Disable bidirectional text support for slight performance bonus
 bidi-display-reordering nil
 blink-matching-paren nil ; don't blink--too distracting
 )
#+END_SRC

line numers...
#+name: appearance
#+BEGIN_SRC emacs-lisp
  (require 'nlinum)
  (add-hook 'prog-mode-hook 'nlinum-mode)
#+END_SRC

Highlight the current line:
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
#+END_SRC

* Configuration File

This defines the order of how the separate code blocks are loaded.
#+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export :exports code
(defvar outline-minor-mode-prefix "\M-#")
<<package-management>>
<<resets>>
<<essentials>>
<<appearance>>
<<funcs-and-macros>>
<<languages>>
#+END_SRC


* Utility Functions & Macros


setup a global key binding for =C-x C-r= to evaluate the =.emacs.d/init.el= file (this comes in handy because the =init.org= is evaluated by this file, so it's a really easy way to reload configuration without having to open the buffer and evaluate it).
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-r") (lambda ()
                                    (interactive)
                                    (load-file "~/.emacs.d/init.el")))

#+END_SRC

a function for RFC 3339 format (Hugo blog frontmatter)
#+name: funcs-and-macros
#+Begin_SRC emacs-lisp
(defun insert-current-date () (interactive)
    (insert (shell-command-to-string "echo -n $(date +%Y-%m-%dT%H:%M:%SZ)")))
#+END_SRC


* Evil
Initialize evil mode:
#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (evil-mode 1)

  (require 'evil-org)
#+END_SRC

Exit insert mode by pressing j and then j quickly:
#+BEGIN_SRC emacs-lisp
  (require 'key-chord)
  (setq key-chord-two-keys-delay 0.5)
  (key-chord-define evil-insert-state-map  "jj" 'evil-normal-state)
  (key-chord-mode 1)
#+END_SRC

* Ido 

enable ido mode with flexible matching in both buffer and file search...
#+BEGIN_SRC emacs-lisp
;  (setq ido-enable-flex-matching t)
;  (ido-mode 1)
#+END_SRC

#+RESULTS:

* Golang


Import =GOPATH= from the shell.
#+name: languages
#+BEGIN_SRC emacs-lisp
(exec-path-from-shell-copy-env "GOPATH")
#+END_SRC

- add a hook for go-mode to load 
- use goimports for gofmt-cmd
- gofmt before save
- custom compile command
- godef jump bindings

#+name: languages
#+BEGIN_SRC emacs-lisp
   (defun caio-go-mode-hook ()
     (setq gofmt-command "goimports")
     (add-hook 'before-save-hook 'gofmt-before-save)
     (if (not (string-match "go" compile-command))
         (set (make-local-variable 'compile-command)
              "go build -v && go test -v && go vet"))
     (global-set-key (kbd "M-return") 'godef-jump)
     (global-set-key (kbd "M-.") 'godef-describe)
     (global-set-key (kbd "M-*") 'pop-tag-mark)
   )
   (add-hook 'go-mode-hook 'caio-go-mode-hook)
#+END_SRC

Use go-eldoc
#+name: languages
#+BEGIN_SRC emacs-lisp
 (add-hook 'go-mode-hook 'go-eldoc-setup)
#+END_SRC

Use company-go
#+name: languages
#+BEGIN_SRC emacs-lisp
 (require 'company-go)
 (add-hook 'go-mode-hook
       (lambda ()
         (set (make-local-variable 'company-backends) '(company-go))
         (company-mode)))
#+END_SRC
* Org 

Enable all potential languages that would be used for org-babel
#+name: resets
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((js . t)
     (sass . t)
     (css . t)
     (shell . t)
     (lua . t)
     ))
#+END_SRC

log todos and notes with the time that they were completed:
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
(setq org-closed-keep-when-no-todo t)
#+END_SRC

set files for the org-agenda to use...

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    '("~/notes/work.org"
                      "~/Dropbox/org/organize.org"))))t
(add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
#+END_SRC

This matches the todo keywords that I use on a daily basis...

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "IN PROGRESS(p)" "IN REVIEW(r)" "WAITING(w)" "SOMEDAY(s)" "|" "DONE(d)" "DELEGATED(l)" "CANCELLED(c)")))
#+END_SRC

activate org-agenda keybinding:

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-ca" 'org-agenda)
#+END_SRC

activate org-capture keybinding:
#+BEGIN_SRC emacs-lisp 
     (global-set-key "\C-cc" 'org-capture)
#+END_SRC

create a custom method to find a heading under the datree for current date
#+BEGIN_SRC emacs-lisp
  (defun org-find-heading-in-datetree ()
    (org-datetree-find-date-create (calendar-current-date))
    (goto-char (point-at-eol))
    (when (not (re-search-forward
                (format org-complex-heading-regexp-format
                        (regexp-quote "Things I Read/Watched")) nil t))
      (insert "\n**** Things I Read/Watched\n"))
    (goto-char (point-at-eol)))
#+END_SRC

enable org-habit for scheduling meetings and setting up habits
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-modules "org-habit")
#+END_SRC

** Org Capture Templates

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
          ("p" "Personal Templates")
          ("w" "Work Templates")
          ("pl" "Link" entry (file+function "~/Dropbox/org/journal.org" org-find-heading-in-datetree)
           "* %?\n:PROPERTIES:\n:Url:%i\n:END:\n\n%i")
          ("pt" "TODO Task" entry (file+headline "~/Dropbox/org/inbox.org" "Tasks")
           "* TODO %?\n:LOGBOOK:\n:CREATED: %u\nSRC: %a\n:END:\n%i\n")
          ("wi" "JIRA ISSUE Task" entry (file+headline "~/Notes/work.org" "Backlog")
           "* TODO BFDTORBIT-%^{Issue} %^{Description}\n:PROPERTIES:\n:Link:%i\n:END:\nCREATED: %u\n ")
          )  
        )
#+END_SRC

set exports to be silent by default for code block executions
#+BEGIN_SRC emacs-lisp
  ;;    (setq org-babel-default-header-args
  ;;         (cons '(:results . "none")
  ;;         (assq-delete-all :results org-babel-default-header-args)))
#+END_SRC

a fix for an issue I'm experiencing with doom themes where [[https://github.com/hlissner/emacs-doom-theme/issues/30][org-level-1 font has unexpected behavior when moving cursor through characters]]:

#+BEGIN_SRC emacs-lisp
(custom-set-faces
  '(org-level-1 ((t (:line-width 1))))
)
#+END_SRC

Make org-level-1 the same height as other lines (the doom themes sizing makes the headlines do wonky things with my font)

* Org Publish

#+BEGIN_SRC emacs-lisp 
  (require 'ox-publish)
  (setq caio-header-file "~/src/gitlab.com/chaseadamsio/dotfiles/partials/header.html")
  (defun caio-header (arg)
    (with-temp-buffer
      (insert-file-contents caio-header-file)
      (buffer-string)))

  (setq org-publish-project-alist
        '(
          ("dotfiles"
           :base-directory "~/src/gitlab.com/chaseadamsio/dotfiles/"
           :base-extension "org"
           :publishing-directory "~/src/gitlab.com/chaseadamsio/dotfiles/public_html/"
           :section-numbers nil
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-level 4
           :html-head "<link href=\"https://chaseadams.io/css/main.css\" rel=\"stylesheet\">"
           :html-doctype "html5"
           :html-divs caio-org-html-divs
           :html-preamble caio-header
           :with-toc nil)
        ("images"
         :base-directory "~/src/gitlab.com/chaseadamsio/dotfiles/"
         :base-extension "jpg\\|gif\\|png"
         :publishing-directory "~/src/gitlab.com/chaseadamsio/dotfiles/public_html"
         :publishing-function org-publish-attachment)
        ("dotfiles-all" :components ("dotfiles" "images"))))
#+END_SRC

* Tramp
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC


* Appearance (refactor)
Disable the audible bell (I'm smart, I can figure out when I've done something wrong) and disable all the chrome for the emacs external application.
#+name: resets
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore) ;; the bell annoys the h*ck out of me, turn it off
  (setq initial-scratch-message "")
  (setq inhibit-startup-message t)

  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1)) ;; for a "thin" emacs app
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1)) ;; for a "thin" emacs app
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1)) ;; for a "thin" emacs app
#+END_SRC

Use Fira Mono, set the line height and shrink the font to 9pt.
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "Fira Mono")
(setq-default line-spacing 3)
(set-face-attribute 'default nil :height 100)
#+END_SRC

I like my cursor to be a thin line rather than a chunky block. I've always found the chunky block to be distracting.
#+name: resets
#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'bar)
#+END_SRC

One of the things I dislike about emacs is when you select some text and want to replace it with other text the way you would in a sane editor, it leaves the selected text and places the cursor at the end of the selection and starts typing. This "fixes" that so that when I select text and start to type, it replaces the selected text with my newly typed words. 
#+name: resets
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

* Registers (refactor)
Registers are a convenient way to access frequently opened files in a quick manner.

You can access a register by typing =C-x r j= followed by the letter in the =set-register ?= to jump to that file.

** Organize Registers
Quickly open my Dropbox journal:
#+BEGIN_SRC emacs-lisp
  (set-register ?j (cons 'file (caio-dropbox-join "journal")))
#+END_SRC

Quickly open my Dropbox organize:
#+BEGIN_SRC emacs-lisp
  (set-register ?o (cons 'file (caio-dropbox-join "organize")))
#+END_SRC

Quickly open my work journal:
#+BEGIN_SRC emacs-lisp
  (set-register ?w (cons 'file "~/notes/work.org"))
#+END_SRC

** Dotfiles Registers
*** Register for opening =[[file:init.org][init.org]]=
#+BEGIN_SRC emacs-lisp
  (set-register ?e (cons 'file (caio-dotfiles-join "emacs")))
#+END_SRC

*** register for opening =dotfiles=
#+BEGIN_SRC emacs-lisp
  (set-register ?d (cons 'file dotfiles-dir))
#+END_SRC
