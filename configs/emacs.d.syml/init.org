#+TITLE: chaseadamsio emacs configuration
#+AUTHOR: Chase Adams
#+EMAIL: chasebuildssoftware@gmail.com

* There & Back Again

On 2016-12-9, I started my journey into Emacs. There was no way of knowing that this 6 year running champion for vim would fall deeply into the blackhole that is Emacs, but now that I'm here, there's no turning back...Emacs is simply the tool I've been looking for my entire career as a software engineer.

This document is a living, breathing self-documented configuration. What you see in this file is /exactly/ what my configuration looks like, the ~init.el~ will always contain the code found in this document because /Emacs org-mode/ is doing the generation for me.

This is the screenshot of my current config:

[[/screenshot.png]]

* How It Works

Package Management is really important to me, so I did my research and found that Cask meets my requirements:

** Package Management & Package Defaults

- a single file with individually declared dependencies
- pallet keeps it up to date from running ~package-install~
- both of these make it easy to reproduce environments across machines 

#+name: package-management
#+BEGIN_SRC emacs-lisp
(require 'cask "~/.cask/cask.el")
(cask-initialize)
(require 'pallet)
(pallet-mode t)
#+END_SRC

Use go-eldoc
#+name: package-management
#+BEGIN_SRC emacs-lisp
(require 'go-eldoc)
#+END_SRC

Use company
#+name: package-management
#+BEGIN_SRC emacs-lisp
(require 'company)

(setq company-tooltip-limit 20)
(setq company-idle-delay .3)   
(setq company-echo-delay 0)    
(setq company-begin-commands '(self-insert-command))
                                  
#+END_SRC

Use helm...
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
#+END_SRC

Initialize exec-path-from-shell for getting GOPATH later...
#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+END_SRC

** Sensible Resets

Disable the audible bell (I'm smart, I can figure out when I've done something wrong) and disable all the chrome for the emacs external application.
#+name: resets
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore) ;; the bell annoys the h*ck out of me, turn it off
(menu-bar-mode -1) ;; for a "thin" emacs app
(scroll-bar-mode -1) ;; for a "thin" emacs app
(tool-bar-mode -1) ;; for a "thin" emacs app
#+END_SRC

Use Fira Mono and shrink the font to 9pt.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "Fira Mono")
(set-face-attribute 'default nil :height 90)
#+END_SRC

I like my cursor to be a thin line rather than a chunky block. I've always found the chunky block to be distracting.
#+name: resets
#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'bar)
#+END_SRC

One of the things I dislike about emacs is when you select some text and want to replace it with other text the way you would in a sane editor, it leaves the selected text and places the cursor at the end of the selection and starts typing. This "fixes" that so that when I select text and start to type, it replaces the selected text with my newly typed words. 
#+name: resets
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

Enable all potential languages that would be used for org-babel
#+name: resets
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((js . t)
     (sass . t)
     (css . t)
     (sh . t)
     ))
#+END_SRC
** Essentials

Automatically insert the closing character for pair-type characters.
#+name: essentials
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC

** Appearance

I'm using [[https://github.com/hlissner/emacs-doom-theme][Doom Themes]] as my color scheme with =dark one= as the loaded theme.
#+name: appearance
#+BEGIN_SRC emacs-lisp
(require 'doom-themes)
(load-theme 'doom-one t)
#+END_SRC

Set the doom-buffers to be "brighter".
#+name: appearance
#+BEGIN_SRC emacs-lisp
(add-hook 'find-file-hook 'doom-buffer-mode)
#+END_SRC

Set some variables for the doom ui.
#+name: appearance
#+BEGIN_SRC emacs-lisp
(defvar doom-ui-fringe-size '3
  "Default fringe width")
(defvar doom-ui-theme 'doom-one
  "The color theme currently in use.")
(defvar doom-ui-font
  (font-spec :family "Fira Mono" :size 12)
  "The font currently in use.")
(defvar doom-ui-variable-pitch-font
  (font-spec :family "Fira Sans" :size 12)
  "The font currently in use.")
(setq org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t)
#+END_SRC

Use doom neotree with nice icons.
#+name: appearance
#+BEGIN_SRC emacs-lisp
(require 'doom-neotree)
(setq doom-neotree-enable-file-icons 'simple)
#+END_SRC

all-the-icons for beautiful icons in modeline and neotree.
#+name: appearance
#+BEGIN_SRC emacs-lisp
(require 'all-the-icons)
#+END_SRC 

this unclutters the modeline when there are lots of major and minor modes that don't need to be shown there.
#+name: appearance
#+BEGIN_SRC emacs-lisp
(require 'diminish)
(eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
(eval-after-load "company" '(diminish 'company-mode))
(eval-after-load "eldoc" '(diminish 'eldoc-mode))
(eval-after-load "paredit" '(diminish 'paredit-mode))
(eval-after-load "tagedit" '(diminish 'tagedit-mode))
(eval-after-load "elisp-slime-nav" '(diminish 'elisp-slime-nav-mode))
(eval-after-load "skewer-mode" '(diminish 'skewer-mode))
(eval-after-load "skewer-css" '(diminish 'skewer-css-mode))
(eval-after-load "skewer-html" '(diminish 'skewer-html-mode))
(eval-after-load "smartparens" '(diminish 'smartparens-mode))
(eval-after-load "guide-key" '(diminish 'guide-key-mode))
(eval-after-load "whitespace-cleanup-mode" '(diminish 'whitespace-cleanup-mode))
(eval-after-load "subword" '(diminish 'subword-mode))
#+END_SRC

murdered out (makes the appearance a lot more subtle on interactions)
#+name: appearance
#+BEGIN_SRC emacs-lisp
(setq-default
 mode-line-default-help-echo nil ; don't say anything on mode-line mouseover
 indicate-buffer-boundaries nil  ; don't show where buffer starts/ends
 indicate-empty-lines nil        ; don't show empty lines
 fringes-outside-margins t       ; switches order of fringe and margin
 ;; Keep cursors and highlights in current window only
 cursor-in-non-selected-windows nil
 highlight-nonselected-windows nil
 ;; Disable bidirectional text support for slight performance bonus
 bidi-display-reordering nil
 blink-matching-paren nil ; don't blink--too distracting
 )
#+END_SRC

line numers...
#+name: appearance
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

** Configuration File

This defines the order of how the separate code blocks are loaded.
#+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export :exports code
(defvar outline-minor-mode-prefix "\M-#")
<<package-management>>
<<resets>>
<<essentials>>
<<appearance>>
<<funcs-and-macros>>
<<languages>>
#+END_SRC

Save backups and auto-saves to system temporary directory rather than in the source directory (version control becomes a nightmare otherwise)
#+BEGIN_SRC emacs-lisp
 (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))
#+END_SRC

** Registers, Utility Functions & Macros

a register for "e" to open my =init.org= from anywhere inside of emacs.
#+name: funcs-and-macros
#+BEGIN_SRC emacs-lisp
(set-register ?e (cons 'file "~/.emacs.d/init.org"))
#+END_SRC

a function for RFC 3339 format (Hugo blog frontmatter)
#+name: funcs-and-macros
#+Begin_SRC emacs-lisp
(defun insert-current-date () (interactive)
    (insert (shell-command-to-string "echo -n $(date +%Y-%m-%dT%H:%M:%SZ)")))
#+END_SRC

** Languages: Go

#+name: languages

Import =GOPATH= from the shell.
#+BEGIN_SRC emacs-lisp
(exec-path-from-shell-copy-env "GOPATH")
#+END_SRC

- add a hook for go-mode to load 
- use goimports for gofmt-cmd
- gofmt before save
- custom compile command
- godef jump bindings

#+name: languages
#+BEGIN_SRC emacs-lisp
(defun caio-go-mode-hook ()
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go build -v && go test -v && go vet"))
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-*") 'pop-tag-mark)
)
(add-hook 'go-mode-hook 'caio-go-mode-hook)
#+END_SRC

Use go-eldoc
#+name: languages
#+BEGIN_SRC emacs-lisp
(add-hook 'go-mode-hook 'go-eldoc-setup)
#+END_SRC

Use company-go
#+name: languages
#+BEGIN_SRC emacs-lisp
(require 'company-go)
(add-hook 'go-mode-hook
      (lambda ()
        (set (make-local-variable 'company-backends) '(company-go))
        (company-mode)))
#+END_SRC
