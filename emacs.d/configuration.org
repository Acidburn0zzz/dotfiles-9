#+TITLE: Emacs Configuration
#+AUTHOR: Chase Adams
#+EMAIL: realchaseadams@gmail.com

* Package Initialization

** Setup Package Repositories

Add melpa, gnu and marmalade to package archives list.

#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("marmalade" .  "http://marmalade-repo.org/packages/")
			   ("gnu" . "http://elpa.gnu.org/packages/")))
  (package-initialize)
#+END_SRC

* Install =use-package=

I use [[https://github.com/jwiegley/use-package][=use-package=]] to install, require and declare my Emacs package configuration. This installs =use-package= automatically if it's not already present.

#+BEGIN_SRC emacs-lisp
  (defun my/install-use-package()
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    )

  (my/install-use-package)
#+END_SRC

* Setup Core

Shorten "yes" or "no" to "y" or "n".

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Disable splash screen.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

Set scratch to be an empty buffer.

#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message "")
#+END_SRC

Highlight the current line.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq line-spacing 4)
#+END_SRC


* Setup exec-path-from-shell
#+BEGIN_SRC emacs-lisp
  (defun set-exec-path-from-shell-PATH ()
    (let ((path-from-shell (replace-regexp-in-string
			    "[ \t\n]*$"
			    ""
			    (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq eshell-path-env path-from-shell) ; for eshell users
      (setq exec-path (split-string path-from-shell path-separator))))

  (when window-system (set-exec-path-from-shell-PATH))
#+END_SRC
* Jump to Emacs Config file
#+BEGIN_SRC emacs-lisp
(defun caio/find-dotfile ()
    "Edit the 'dotfile' in the current window."
    (interactive)
    (find-file-existing "~/.emacs.d/configuration.org"))
#+END_SRC

* Jump to planner.org
#+BEGIN_SRC emacs-lisp
  (defun caio/find-planner ()
      "Edit planner.org in the current window."
      (interactive)
      (find-file-existing "~/Dropbox/planner.org"))
#+END_SRC

* Setup Evil

I came from the editor vim, so I use vim bindings with evil.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1)
    (use-package evil-commentary
      :ensure t
      :config
      (evil-commentary-mode)
      )
    )
#+END_SRC

* Setup EditorConfig
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1)
    )
#+END_SRC

* Setup Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq org-capture-templates
	  '(("b" "Bookmark" entry (file+headline "~/Dropbox/inbox.org" "Bookmarks")
	     "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)
	    ("t" "Task" entry (file+headline "~/Dropbox/todo.org" "Inbox")
	     "* TODO %?\n  %i\n  %a\n")
	    ("j" "Journal" entry (file+olp+datetree "~/Dropbox/planner.org" "Journal")
	     "* %?\nEntered on %U\n  %i\n  %a")))
    (custom-set-variables
     '(org-agenda-files (quote ("~/Dropbox/todo.org")))
     '(org-default-notes-file "~/Dropbox/notes.org")
     '(org-agenda-ndays 7)
     '(org-deadline-warning-days 14)
     '(org-agenda-show-all-dates t)
     '(org-agenda-skip-deadline-if-done t)
     '(org-agenda-skip-scheduled-if-done t)
     '(org-agenda-start-on-weekday t)
     '(org-reverse-note-order t)
     ))
#+END_SRC


* Setup Javascript

** JSX Mode
Setup JSX to be available to any =.jsx= files.

#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("components\\/.*\\.jsx?\\'" . rjsx-mode))
    )

  (use-package flow-minor-mode
    :ensure t
    :after rjsx-mode
    :config
    (add-hook 'rjsx-mode-hook 'flow-minor-enable-automatically)
    (add-hook 'js2-mode-hook 'flow-minor-enable-automatically)
    )
#+END_SRC


** Flycheck

Setup check for local eslint and flow executables for flycheck. *This needs to be refactored to take the name of the executable and the path instead of repeating the same code.*

#+BEGIN_SRC emacs-lisp

  (defun set-js-executable-paths (var-name exec-path)
    (let* ((root (locate-dominating-file
		   (or (buffer-file-name) default-directory)
		   "node_modules"))
	    (executable (and root
			    (expand-file-name exec-path root))))
	 (when (and executable (file-executable-p executable))
	   (set var-name executable)))
    )

  (defun my/use-eslint-from-node-modules ()
  (set-js-executable-paths 'flycheck-javascript-eslint-executable "node_modules/eslint/bin/eslint.js"))
  (defun my/use-flow-from-node-modules ()
  (set-js-executable-paths 'flycheck-javascript-flow-executable "node_modules/.bin/flow"))
  (defun my/use-flow-for-coverage-from-node-modules ()
  (set-js-executable-paths 'flycheck-javascript-flow-coverage-executable "node_modules/.bin/flow"))

#+END_SRC

* TOML
#+BEGIN_SRC emacs-lisp
  (use-package toml-mode
    :ensure t)
#+END_SRC

* YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC

* Docker
** Dockerfile
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("Dockerfile-?.+\\'" . dockerfile-mode)))
#+END_SRC

** Docker Compose
#+BEGIN_SRC emacs-lisp
  (use-package docker-compose-mode
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-export-coding-system 'utf-8)

  ;; for emacs-plus as a way to have a more seamless application window
  (add-to-list 'default-frame-alist
	       '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist
	       '(ns-appearance . dark))


  ;; display line numbers
  (global-display-line-numbers-mode 1)
  (add-hook 'eshell-mode-hook (lambda() (display-line-numbers-mode -1)))

  (set-face-attribute 'default nil :family "Fira Code" :height 120)
#+END_SRC

* UI


#+BEGIN_SRC emacs-lisp
 (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))

  ;; detach the UI customization that gets appended to the file every save http://emacsblog.org/2008/12/06/quick-tip-detaching-the-custom-file/
  (setq custom-file (make-temp-file "emacs-custom"))

  ;; bind escape to keyboard escape (so I don't have to gg when in the mini-buffer, acts more like vim
  (global-set-key (kbd "<escape>")      'keyboard-escape-quit)

  ;; disable creating backup~ files
  (setq make-backup-files nil)
  ;; disable creating #autosave# files
  (setq auto-save-default nil)

  (show-paren-mode 1)
  (add-hook 'prog-mode-hook 'electric-pair-local-mode)

  (setq truncate-lines t word-wrap nil)

  (setq ring-bell-function 'ignore) ;; the bell annoys the h*ck out of me, turn it off

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(default ((t :inherit nil :stipple nil :background "#20242D" :foreground "#C7C8FF")))
   '(hl-line ((t :background "#2D323F")))
   '(line-number ((t :foreground "#676784")))

   '(font-lock-function-face ((t :foreground "#DD92F6")))
   '(font-lock-keyword-face ((t :foreground "#DD92F6")))
   '(font-lock-comment-face ((t :foreground "#59496D")))
   '(font-lock-string-face ((t :foreground "#7EFDD0")))
   '(font-lock-variable-name-face ((t :foreground "#69B4F")))

   '(grep-hit-match ((t :background "#463a56")))
   '(grep-match-match ((t :background "#463a56")))
   '(match ((t :background "#463a56")))
   '(isearch ((t :background "#463a56")))

   '(button ((t :foreground "#69B4F9" :underline t)))
   '(link ((t :foreground "#69B4F9" :underline t)))
   '(link-visited ((t :foreground "#DD92F6" :underline t)))
   '(cursor ((t :background "#DD92F6")))
   '(show-paren-match ((t :foreground "#20242D" :background "#DD92F6")))
   '(show-paren-mismatch ((t :foreground "#20242D" :background "#FCAD3F")))
   '(paren-face-no-match ((t :foreground "#20242D" :background "#FF8E8E")))

   '(rjsx-tag ((t :foreground "#DD92F6")))

   '(org-block ((t :foreground "#C7C8FF")))
   '(org-block-begin-line ((t :foreground "#DD92F6")))
   '(org-document-title ((t :foreground "#7EFDD0")))
   '(org-document-info-keyword ((t :foreground "#0adeff" :weight bold)))
   '(org-level-1 ((t :foreground "#DD92F6")))
   '(org-level-2 ((t :foreground "#0adeff")))
   '(org-level-3 ((t :foreground "#0adeff")))
   '(org-level-4 ((t :foreground "#0adeff")))
   '(org-level-5 ((t :foreground "#0adeff")))
   '(org-level-6 ((t :foreground "#0adeff")))
   '(org-level-7 ((t :foreground "#0adeff")))
   '(org-level-8 ((t :foreground "#0adeff")))

   '(dockerfile-image-name ((t :foreground "#7EFDD0")))

   '(mode-line ((t :background "#20242D" :foreground "#C7C8FF")))
   '(mode-line-inactive ((t :background "#20242D" :foreground "#676784")))
   '(region ((t :background "#463a56")))
   )
#+END_SRC

#+RESULTS:
